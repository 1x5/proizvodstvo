{"ast":null,"code":"var _jsxFileName = \"/Users/ll/proizvodstvo/client/src/components/tasks/TaskForm.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer } from 'react';\nimport axios from 'axios';\nimport taskReducer from './reducers/taskReducer';\n\n// Начальное состояние\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  tasks: [],\n  currentTask: null,\n  loading: true,\n  error: null\n};\n\n// Создание контекста\nexport const TaskContext = /*#__PURE__*/createContext(initialState);\n\n// Провайдер контекста\nexport const TaskProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(taskReducer, initialState);\n\n  // Получение всех задач\n  const getTasks = async () => {\n    try {\n      const res = await axios.get('/api/tasks');\n      dispatch({\n        type: 'GET_TASKS',\n        payload: res.data\n      });\n    } catch (err) {\n      var _err$response, _err$response$data;\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.msg) || 'Ошибка получения задач'\n      });\n    }\n  };\n\n  // Получение задачи по ID\n  const getTaskById = async id => {\n    try {\n      const res = await axios.get(`/api/tasks/${id}`);\n      dispatch({\n        type: 'GET_TASK',\n        payload: res.data\n      });\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.msg) || 'Ошибка получения задачи'\n      });\n    }\n  };\n\n  // Создание новой задачи\n  const createTask = async formData => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    try {\n      const res = await axios.post('/api/tasks', formData, config);\n      dispatch({\n        type: 'ADD_TASK',\n        payload: res.data\n      });\n      return res.data;\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.msg) || 'Ошибка создания задачи'\n      });\n      return null;\n    }\n  };\n\n  // Обновление задачи\n  const updateTask = async (id, formData) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    try {\n      const res = await axios.put(`/api/tasks/${id}`, formData, config);\n      dispatch({\n        type: 'UPDATE_TASK',\n        payload: res.data\n      });\n      return res.data;\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: ((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.msg) || 'Ошибка обновления задачи'\n      });\n      return null;\n    }\n  };\n\n  // Добавление заметки к задаче\n  const addNote = async (taskId, text) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    try {\n      const res = await axios.post(`/api/tasks/${taskId}/notes`, {\n        text\n      }, config);\n      dispatch({\n        type: 'UPDATE_TASK',\n        payload: res.data\n      });\n      return res.data;\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: ((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.msg) || 'Ошибка добавления заметки'\n      });\n      return null;\n    }\n  };\n\n  // Загрузка файла к задаче\n  const uploadFile = async (taskId, file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('taskId', taskId);\n    try {\n      const res = await axios.post('/api/files', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      dispatch({\n        type: 'FILE_UPLOADED',\n        payload: {\n          taskId,\n          file: res.data\n        }\n      });\n      return res.data;\n    } catch (err) {\n      var _err$response6, _err$response6$data;\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: ((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.msg) || 'Ошибка загрузки файла'\n      });\n      return null;\n    }\n  };\n\n  // Удаление файла\n  const deleteFile = async (fileId, taskId) => {\n    try {\n      await axios.delete(`/api/files/${fileId}`);\n      dispatch({\n        type: 'FILE_DELETED',\n        payload: {\n          taskId,\n          fileId\n        }\n      });\n    } catch (err) {\n      var _err$response7, _err$response7$data;\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: ((_err$response7 = err.response) === null || _err$response7 === void 0 ? void 0 : (_err$response7$data = _err$response7.data) === null || _err$response7$data === void 0 ? void 0 : _err$response7$data.msg) || 'Ошибка удаления файла'\n      });\n    }\n  };\n\n  // Удаление задачи\n  const deleteTask = async id => {\n    try {\n      await axios.delete(`/api/tasks/${id}`);\n      dispatch({\n        type: 'DELETE_TASK',\n        payload: id\n      });\n    } catch (err) {\n      var _err$response8, _err$response8$data;\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: ((_err$response8 = err.response) === null || _err$response8 === void 0 ? void 0 : (_err$response8$data = _err$response8.data) === null || _err$response8$data === void 0 ? void 0 : _err$response8$data.msg) || 'Ошибка удаления задачи'\n      });\n    }\n  };\n\n  // Фильтрация задач\n  const filterTasks = (keyword, filterOptions) => {\n    dispatch({\n      type: 'FILTER_TASKS',\n      payload: {\n        keyword,\n        filterOptions\n      }\n    });\n  };\n\n  // Сортировка задач\n  const sortTasks = (sortField, sortDirection) => {\n    dispatch({\n      type: 'SORT_TASKS',\n      payload: {\n        sortField,\n        sortDirection\n      }\n    });\n  };\n\n  // Очистка текущей задачи\n  const clearCurrentTask = () => {\n    dispatch({\n      type: 'CLEAR_CURRENT_TASK'\n    });\n  };\n\n  // Очистка ошибок\n  const clearErrors = () => {\n    dispatch({\n      type: 'CLEAR_ERRORS'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks: state.tasks,\n      currentTask: state.currentTask,\n      loading: state.loading,\n      error: state.error,\n      getTasks,\n      getTaskById,\n      createTask,\n      updateTask,\n      addNote,\n      uploadFile,\n      deleteFile,\n      deleteTask,\n      filterTasks,\n      sortTasks,\n      clearCurrentTask,\n      clearErrors\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = TaskProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useReducer","axios","taskReducer","jsxDEV","_jsxDEV","initialState","tasks","currentTask","loading","error","TaskContext","TaskProvider","children","_s","state","dispatch","getTasks","res","get","type","payload","data","err","_err$response","_err$response$data","response","msg","getTaskById","id","_err$response2","_err$response2$data","createTask","formData","config","headers","post","_err$response3","_err$response3$data","updateTask","put","_err$response4","_err$response4$data","addNote","taskId","text","_err$response5","_err$response5$data","uploadFile","file","FormData","append","_err$response6","_err$response6$data","deleteFile","fileId","delete","_err$response7","_err$response7$data","deleteTask","_err$response8","_err$response8$data","filterTasks","keyword","filterOptions","sortTasks","sortField","sortDirection","clearCurrentTask","clearErrors","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ll/proizvodstvo/client/src/components/tasks/TaskForm.js"],"sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport axios from 'axios';\nimport taskReducer from './reducers/taskReducer';\n\n// Начальное состояние\nconst initialState = {\n  tasks: [],\n  currentTask: null,\n  loading: true,\n  error: null\n};\n\n// Создание контекста\nexport const TaskContext = createContext(initialState);\n\n// Провайдер контекста\nexport const TaskProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(taskReducer, initialState);\n\n  // Получение всех задач\n  const getTasks = async () => {\n    try {\n      const res = await axios.get('/api/tasks');\n\n      dispatch({\n        type: 'GET_TASKS',\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: err.response?.data?.msg || 'Ошибка получения задач'\n      });\n    }\n  };\n\n  // Получение задачи по ID\n  const getTaskById = async (id) => {\n    try {\n      const res = await axios.get(`/api/tasks/${id}`);\n\n      dispatch({\n        type: 'GET_TASK',\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: err.response?.data?.msg || 'Ошибка получения задачи'\n      });\n    }\n  };\n\n  // Создание новой задачи\n  const createTask = async (formData) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/tasks', formData, config);\n\n      dispatch({\n        type: 'ADD_TASK',\n        payload: res.data\n      });\n\n      return res.data;\n    } catch (err) {\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: err.response?.data?.msg || 'Ошибка создания задачи'\n      });\n      return null;\n    }\n  };\n\n  // Обновление задачи\n  const updateTask = async (id, formData) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.put(`/api/tasks/${id}`, formData, config);\n\n      dispatch({\n        type: 'UPDATE_TASK',\n        payload: res.data\n      });\n\n      return res.data;\n    } catch (err) {\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: err.response?.data?.msg || 'Ошибка обновления задачи'\n      });\n      return null;\n    }\n  };\n\n  // Добавление заметки к задаче\n  const addNote = async (taskId, text) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post(`/api/tasks/${taskId}/notes`, { text }, config);\n\n      dispatch({\n        type: 'UPDATE_TASK',\n        payload: res.data\n      });\n\n      return res.data;\n    } catch (err) {\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: err.response?.data?.msg || 'Ошибка добавления заметки'\n      });\n      return null;\n    }\n  };\n\n  // Загрузка файла к задаче\n  const uploadFile = async (taskId, file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('taskId', taskId);\n\n    try {\n      const res = await axios.post('/api/files', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      dispatch({\n        type: 'FILE_UPLOADED',\n        payload: { taskId, file: res.data }\n      });\n\n      return res.data;\n    } catch (err) {\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: err.response?.data?.msg || 'Ошибка загрузки файла'\n      });\n      return null;\n    }\n  };\n\n  // Удаление файла\n  const deleteFile = async (fileId, taskId) => {\n    try {\n      await axios.delete(`/api/files/${fileId}`);\n\n      dispatch({\n        type: 'FILE_DELETED',\n        payload: { taskId, fileId }\n      });\n    } catch (err) {\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: err.response?.data?.msg || 'Ошибка удаления файла'\n      });\n    }\n  };\n\n  // Удаление задачи\n  const deleteTask = async (id) => {\n    try {\n      await axios.delete(`/api/tasks/${id}`);\n\n      dispatch({\n        type: 'DELETE_TASK',\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: 'TASK_ERROR',\n        payload: err.response?.data?.msg || 'Ошибка удаления задачи'\n      });\n    }\n  };\n\n  // Фильтрация задач\n  const filterTasks = (keyword, filterOptions) => {\n    dispatch({\n      type: 'FILTER_TASKS',\n      payload: { keyword, filterOptions }\n    });\n  };\n\n  // Сортировка задач\n  const sortTasks = (sortField, sortDirection) => {\n    dispatch({\n      type: 'SORT_TASKS',\n      payload: { sortField, sortDirection }\n    });\n  };\n\n  // Очистка текущей задачи\n  const clearCurrentTask = () => {\n    dispatch({ type: 'CLEAR_CURRENT_TASK' });\n  };\n\n  // Очистка ошибок\n  const clearErrors = () => {\n    dispatch({ type: 'CLEAR_ERRORS' });\n  };\n\n  return (\n    <TaskContext.Provider\n      value={{\n        tasks: state.tasks,\n        currentTask: state.currentTask,\n        loading: state.loading,\n        error: state.error,\n        getTasks,\n        getTaskById,\n        createTask,\n        updateTask,\n        addNote,\n        uploadFile,\n        deleteFile,\n        deleteTask,\n        filterTasks,\n        sortTasks,\n        clearCurrentTask,\n        clearErrors\n      }}\n    >\n      {children}\n    </TaskContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}